---
title: "Untitled"
format: html
server: shiny
---

## Inputs and Outputs


```{r}
library(sf)
library(terra)
library(caret)
library(randomForest)
```

```{r}
```


```{r}
TrainingData <- st_read("C:/Users/leoni/Documents/Uni/UGS/example_data/training_data.shp")  
```
```{r}
AOI <- st_read("C:/Users/leoni/Documents/Uni/UGS/example_data/clip_area.shp")
crs(AOI, describe = TRUE)$code
```


```{r}
b2 <- rast("C:/Users/leoni/Documents/Uni/UGS/example_data/T32UPU_20210814T102031_B02_10m_extent.tif")
b3 <- rast("C:/Users/leoni/Documents/Uni/UGS/example_data/T32UPU_20210814T102031_B03_10m_extent.tif")
b4 <- rast("C:/Users/leoni/Documents/Uni/UGS/example_data/T32UPU_20210814T102031_B04_10m_extent.tif")
b8 <- rast("C:/Users/leoni/Documents/Uni/UGS/example_data/T32UPU_20210814T102031_B08_10m_extent.tif")
```


```{r}

```


```{r}
b2 = project(b2, "EPSG:25832")
b3 = project(b3, "EPSG:25832")
b4 = project(b4, "EPSG:25832")
b8 = project(b8, "EPSG:25832")
```


```{r}
crs(AOI, describe = TRUE)$code
crs(b2, describe = TRUE)$code
crs(b3, describe = TRUE)$code
crs(b4, describe = TRUE)$code
crs(b8, describe = TRUE)$code
```


```{r}
b2_clip = crop(b2, AOI, mask = TRUE)
b3_clip = crop(b3, AOI, mask = TRUE)
b4_clip = crop(b4, AOI, mask = TRUE)
b8_clip = crop(b8, AOI, mask = TRUE)
```


```{r}
#ndvi1 <- (b8_clip âˆ’ b4_clip) / (b8_clip + b4_clip)

ndwi <- (b3_clip - b8_clip) / (b3_clip + b8_clip)
ndvi <- (b8_clip - b4_clip) / (b8_clip + b4_clip)

names(ndvi) <- "ndvi"
names(ndwi) <- "ndwi"
```


```{r}
img <- c(b2_clip, b3_clip, b4_clip, b8_clip, ndvi, ndwi)
```


```{r}


smp <- terra::extract(img, TrainingData, df = True)

names(img) <- c("b2", "b3", "b4", "b8", "ndvi", "ndwi")

```


```{r}

smp$cl <- as.factor( TrainingData$class[ match(smp$ID, seq(nrow(TrainingData)) ) ] )
smp <- smp[-1]

```


```{r}
sum(is.na(smp))
```


```{r}
smp[is.na(smp)] <- 0 #or 999
```

```{r}
# Create training and testing data set

set.seed(123)  # for reproducibility

train.test.split <- caret::createDataPartition(smp$cl , p = 0.8, list = FALSE)

training_data <- smp[train.test.split, ]

testing_data <- smp[-train.test.split, ]

str(training_data)
```


```{r}

rf_model <- train(cl ~ ., data = training_data, method = "rf",
                  trControl = trainControl(method = "cv", number = 10),
                  tuneLength = 3)

```


```{r}
predictions <- predict(rf_model)

```


```{r}
confusionMatrix(rf_model)
```
```{r}
plot(img)
```
```{r}
img
rf_model
```



```{r}
predicted_classes <- predict(img, rf_model)

plot(predicted_classes)
```

